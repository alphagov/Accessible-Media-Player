// Main config required for the nomensa media player to work with the jw player
var jwconfig={init:function(player){var self=this;this.player=player;this.cue();this.player.onPlay(function(e){self.setSliderTimeout();if(self.config.buttons.toggle){self.$html.find('.play').removeClass('play').addClass('pause').text('Pause');}if(self.config.captionsOn&&self.captions){self.setCaptionTimeout();}});this.player.onPause(function(e){self.clearSliderTimeout();if(self.config.buttons.toggle){self.$html.find('.pause').removeClass('pause').addClass('play').text('Play');}if(self.config.captionsOn&&self.captions){self.clearCaptionTimeout();}});if(this.config.repeat===true){this.player.onComplete(function(e){self.play();});}},getURL:function(){return this.config.url;},play:function(){this.player.play();this.setSliderTimeout();if(this.config.captionsOn&&this.captions){this.setCaptionTimeout();}},pause:function(){this.player.pause();this.clearSliderTimeout();if(this.config.captionsOn&&this.captions){this.clearCaptionTimeout();}},mute:function(){var $button=this.$html.find('button.mute');this.player.setMute();if($button.hasClass('muted')){$button.removeClass('muted');}else{$button.addClass('muted');}},getCurrentTime:function(){return this.player.getPosition();},getBytesLoaded:function(){return this.player.getBuffer();},getBytesTotal:function(){return 100;},seek:function(time){this.player.seek(time);if(this.config.captionsOn&&this.captions){this.$html.find('.caption').remove();this.clearCaptionTimeout();this.getPreviousCaption(time);this.setCaptionTimeout();}},cue:function(){return;}};
// Callback function for when the JW Player has loaded in the DOM
function jwPlayerReady(obj){var id=$(obj.ref).attr('id');var player=PlayerDaemon.getPlayer(id);var myplayer=jwplayer(obj.ref);player.init(myplayer);}